from __future__ import annotations

"""
Generate LaTeX tables for the Special Number Two paper.

Writes:
  special_number_two/paper/appendices/large_parity_table.tex

Usage (from repo root):
  python -m special_number_two.python.generate_tables [N]
where N is the inclusive upper bound for n (default 256).
"""

import os
import sys
from typing import Dict

from new_foundations.python.core import A, P, factorint


def fact_str(n: int) -> str:
    fac = factorint(n)
    parts = []
    for p in sorted(fac):
        e = fac[p]
        if e == 1:
            parts.append(f"{p}")
        else:
            parts.append(f"{p}^{{{e}}}")
    if not parts:
        return f"{n}"
    return " \\cdot ".join(parts)


def tensor_str(n: int) -> str:
    return f"({n & 1}, {A(n) & 1}, {P(n) & 1})"


def omega_odd(n: int) -> int:
    fac = factorint(n)
    return sum(1 for p, e in fac.items() if p % 2 == 1 and (e % 2 == 1))


def ensure_dir(path: str) -> None:
    os.makedirs(path, exist_ok=True)


def write_large_parity_table(N: int, out_path: str) -> None:
    ensure_dir(os.path.dirname(out_path))
    with open(out_path, "w", encoding="utf-8") as f:
        f.write("% Auto-generated by special_number_two/python/generate_tables.py\n")
        f.write("% Do not edit by hand.\n")
        f.write("\\begingroup\\small\n")
        f.write("\\begin{longtable}{r l l l c}\\toprule\n")
        f.write("$n$ & Factorization & $M(n)$ & $A(n),\\;P(n)$ & $T(n)$ \\\\ \\midrule\\endfirsthead\n")
        f.write("\\toprule $n$ & Factorization & $M(n)$ & $A(n),\\;P(n)$ & $T(n)$ \\\\ \\midrule\\endhead\n")
        for n in range(2, N + 1):
            fact = fact_str(n)
            m = n
            a = A(n)
            p = P(n)
            t = tensor_str(n)
            f.write(
                f"{n} & $ {fact} $ & $ {m} $ & $ {a},\\; {p} $ & $ {t} $ \\\\\n"
            )
        f.write("\\bottomrule\\end{longtable}\n")
        f.write("\\endgroup\n")


def main(argv: list[str]) -> int:
    N = 256
    if argv:
        try:
            N = int(argv[0])
        except ValueError:
            print("Usage: python -m special_number_two.python.generate_tables [N]", file=sys.stderr)
            return 2
    out = os.path.join(
        "special_number_two", "paper", "appendices", "large_parity_table.tex"
    )
    write_large_parity_table(N, out)
    print(f"Wrote {out} for n=2..{N}")
    return 0


if __name__ == "__main__":
    raise SystemExit(main(sys.argv[1:]))

